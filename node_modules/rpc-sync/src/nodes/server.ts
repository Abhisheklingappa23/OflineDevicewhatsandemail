import express from "express";
import path from "path";
import fs from "fs";
import ejs from "ejs";

import { TypescriptParser } from "typescript-parser/TypescriptParser";
import { getFilesAtPath } from "../utils/utility";
import hasha from "hasha";

import compression from "compression";
import cors from "cors";

const pkgInfo = require("../../package.json");

enum HttpStatusCode {
    ok = 200,
    notFound = 404,
    serverError = 500,
    authError = 403,
    badRequest = 400
}

export interface IGenerateSchemaParameters {
    srcPath?: string;
    apiPath?: string;
    entityPath?: string;
    schemaOutputPath?: string;
    documentationView?: string;
    enableDocs?: boolean;
    enableClientSchema?: boolean;
    minClientVersion?: string;
    enableCors?: boolean;
    enableCompression?: boolean;
    enableExpressJson?: boolean;
    debug?: boolean;
    schemaSecrets?: string[];
    cacheSchemaJSON?: boolean;
}

export interface IAPIRequest {
    req: express.Request;
    res: express.Response;
    apiMethod: string;
    apiName: string;
    replyError: (e: any) => void;
    expose: (context: any, apiLibrary: any) => void;
}

interface ISchemaVersion {
    hash: string;
    schema: string;
    modified: string;
}


const getSchemaVersion = (options: IGenerateSchemaParameters): Promise<ISchemaVersion> => {
    const schemaOutputPath = getSchemaInfoPath(options);
    return new Promise<ISchemaVersion>((accept, reject) => {
        fs.readFile(schemaOutputPath, (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                accept(JSON.parse(data.toString("utf8")));
            } catch (e) {
                reject(e);
                return;
            }
        });
    });
};

const getSchemaInfoPath = (options: IGenerateSchemaParameters) => {
    return options.schemaOutputPath || path.join(process.cwd(), "schema.json");
}

const generateSchemaFromFile = (filePath: string, rootPath: string) => {
    return new Promise<any>((accept, reject) => {
        const parser = new TypescriptParser();

        parser.parseFile(filePath, rootPath).then((result:any) => {
            var enums: string[] = [];

            for (const dec of result.declarations) {
                const declaration: any = dec;

                delete declaration["start"];
                delete declaration["end"];
                delete declaration["accessors"];

                declaration["properties"] = declaration["properties"] || [];
                declaration["methods"] = declaration["methods"] || [];
                declaration["members"] = declaration["members"] || [];

                if(declaration["members"].length>0){
                    enums.push(declaration["name"]);
                }

                for (const properties of declaration["properties"]) {
                    delete properties["start"];
                    delete properties["end"];
                }

                var deleteMethods: any[] = [];

                for (const method of declaration["methods"]) {
                    if (method["visibility"] == 0) {
                        deleteMethods.push(method);
                    } else {
                        method["parameters"] = method["parameters"] || [];

                        if (method["type"] == null || method["type"] == undefined) {
                            //throw `API method signature missing return type: [${declaration.name}.${method.name}]`;
                            deleteMethods.push(method);
                        }else  if (method["parameters"].length != 2) {
                            //throw `API method signature must have 2 parameters or set as private: [${declaration.name}.${method.name}]`;
                            deleteMethods.push(method);
                        }else{
                              delete method["start"];
                        delete method["end"];


                        for (const param of method["parameters"]) {
                            delete param["start"];
                            delete param["end"];
                        }

                        delete method["variables"];
                        }

                      
                    }

                }

                deleteMethods.forEach((m) => {
                    const i = declaration["methods"].indexOf(m);
                    if (i != -1) {
                        declaration["methods"].splice(i, 1);
                    }
                });
            }

            delete result["filePath"];
            delete result["rootPath"];
            delete result["imports"];
            delete result["start"];
            delete result["end"];
            delete result["usages"];
            delete result["resources"];
            delete result["exports"];
            result["enums"] = enums;
            accept(result);
        }).catch((e) => {
            reject(e);
        });
    })
}

export interface IServerSchema {
    schema: unknown;
    schemaInfo: ISchemaVersion;
}

const generateServerSchema = (options: IGenerateSchemaParameters): Promise<IServerSchema> => {
    return new Promise((accept, reject) => {
        const schemaInfoPath = getSchemaInfoPath(options);
        const srcPath = options.srcPath || path.join(process.cwd(), "/src");
        const apiPath = options.apiPath || path.join(srcPath, "/api");
        const entityPath = options.entityPath || path.join(srcPath, "/db/entity/");

        let schema: any = {};
        
        getFilesAtPath(apiPath).then(async (apiFiles) => {
            for (const apiFilePath of apiFiles) {
                let apiName = path.basename(apiFilePath, ".ts");
                if (apiName.endsWith("API")) {
                    apiName = apiName.substring(0, apiName.length - 3);
                    try {
                        const result = await generateSchemaFromFile(apiFilePath, srcPath);                    
                        schema[apiName] = result;
                    } catch (e) {
                        reject(e);
                        return;
                    }
                }
            }

            getFilesAtPath(entityPath).then(async (apiFiles) => {
                for (const apiFilePath of apiFiles) {
                    if(path.dirname(apiFilePath).endsWith("migration")==false){
                        const entityName = `${path.basename(apiFilePath, ".ts")}_Entity`;
                        try {
                            const result = await generateSchemaFromFile(apiFilePath, srcPath);
                            result["entity"] = true;
                            schema[entityName] = result;
                        } catch (e) {
                            reject(e);
                            return;
                        }
                    }
                 
                }
              
                const schemaStr = JSON.stringify(schema);

                const hash = hasha(schemaStr, { algorithm: 'sha512' }).toString().toUpperCase();

                let schemaInfo: ISchemaVersion;
                try {
                    schemaInfo = await getSchemaVersion(options);
                } catch (ex) {
                    schemaInfo = null;
                }

                if (schemaInfo == null) {
                    schemaInfo = {
                        hash: null,
                        schema: "0.0",
                        modified: new Date().toISOString(),
                    }
                }

                if (isNaN(parseFloat(schemaInfo.schema))) {
                    schemaInfo.schema = "0.0";
                }

                if (options.cacheSchemaJSON == true) {
                    accept({
                        schema,
                        schemaInfo
                    });
                    return;
                }

                if (schemaInfo.hash !== hash) {
                    schemaInfo.schema = `${schemaInfo.schema.split(".")[0]}.${(parseInt(schemaInfo.schema.split(".")[1]) + 1)}`;
                    schemaInfo.hash = hash;

                    const schemaOutputInfo: any = {};
                    schemaOutputInfo[pkgInfo["name"]] = pkgInfo["version"];
                    schemaOutputInfo.schema = schemaInfo.schema;
                    schemaOutputInfo.hash = schemaInfo.hash;
                    schemaOutputInfo.modified = new Date().toISOString();

                    fs.writeFile(schemaInfoPath, JSON.stringify(schemaOutputInfo, null, 2), async (err) => {
                        if (err) {
                            reject(err);
                        }
                        accept({
                            schema,
                          
                            schemaInfo: schemaOutputInfo
                        });
                    });


                } else {
                    accept({
                        schema,
                        
                        schemaInfo
                    });
                }

            }).catch(reject);
        }).catch(reject);
    });
};


export interface ISchemaBuild {
    schema: unknown;
    schemaInfo: ISchemaVersion;
    options: IGenerateSchemaParameters;
}

const buildAPI = (options: IGenerateSchemaParameters): Promise<ISchemaBuild> => {
    return new Promise<ISchemaBuild>((accept, reject) => {
        generateServerSchema(options).then((serverSchema) => {
            accept({
                schema: serverSchema.schema,
                schemaInfo: serverSchema.schemaInfo,
                options
            });
        }).catch((e) => {
            reject(e);
        });
    });
}


const exposeExpressAPI = (build: ISchemaBuild, app: express.Application, onAPIRequest: (request: IAPIRequest) => void): Promise<void> => {

    const replySuccess = (res: express.Response, result: any) => {
        res.contentType("application/json");
        if (typeof (result) !== "object") {
            result = { primitive: result };
        }
        res.status(HttpStatusCode.ok).send(result);
    }

    const replyError = (res: express.Response, error: any, statusCode: HttpStatusCode, extra?: any) => {
        if (build.options.debug == true) {
            console.error(error);
        }


        if (error != null) {
            if (error.statusCode != null) {
                statusCode = error.statusCode;
            }
        }

        error = error || "Unknown error";

        extra = extra || {};

        if ((error.stack || null) !== null) {
            extra.stack = error.stack;
        }

        if ((error.message || null) !== null) {
            error = error.message;
        }

        if (build.options.debug !== true) {
            delete extra.stack;
        }

        res.contentType("application/json");

        res.status(statusCode).send(JSON.stringify(Object.assign(extra, { "error": error.toString() })));
    }

    return new Promise<void>((accept, reject) => {
        try {

            app.use(function (req, res, next) {
                res.removeHeader('X-Powered-By');
                next();
            });

            if (build.options.enableCors !== false) {
                app.use(cors({ methods: ["GET", "POST"], exposedHeaders: ["*"], allowedHeaders: ["*"] }));
            }

            if (build.options.enableCompression !== false) {
                app.use(compression({}));
            }

            if (build.options.enableExpressJson !== false) {
                app.use(express.json());
            }

            app.post("/api/:apiName/:apiMethod", (req, res) => {

                let clientSchemaVersion = parseFloat((req.headers["schema-version"] || "").toString());
                let serverSchemaVersion = parseFloat((build.schemaInfo.schema || "").toString());
                let minSchemaVersion = parseFloat((build.options.minClientVersion || "").toString());

                if (isNaN(clientSchemaVersion)) {
                    clientSchemaVersion = 0;
                }

                if (isNaN(serverSchemaVersion)) {
                    serverSchemaVersion = 0;
                }

                if (isNaN(minSchemaVersion)) {
                    minSchemaVersion = 0;
                }

                if (minSchemaVersion !== 0) {
                    if (clientSchemaVersion < minSchemaVersion) {
                        replyError(res, new Error(`The client v${clientSchemaVersion} is out of date - Minimum: v${minSchemaVersion}, Latest: v${serverSchemaVersion}`), HttpStatusCode.badRequest);
                        return;
                    }
                }

                res.setHeader("schema-version", build.schemaInfo.schema);


                const apiRequst: IAPIRequest = {
                    req,
                    res,
                    apiName: (req.params.apiName || ""),
                    apiMethod: (req.params.apiMethod || ""),
                    replyError: (e) => replyError(res, e, HttpStatusCode.serverError),
                    expose: (context: any, apiLibrary: any) => {
                        context.timestamp = req.headers["timestamp"];

                        const targetInfo = {
                            "target": `${apiRequst.apiName}.${apiRequst.apiMethod}`
                        };

                        if (apiLibrary === null) {
                            replyError(context.res, "apiLibrary not provided", HttpStatusCode.notFound, targetInfo);
                            return;
                        }

                        const api = apiLibrary[apiRequst.apiName] || null;

                        if (api === null) {
                            replyError(context.res, "API not found", HttpStatusCode.notFound, targetInfo);
                            return;
                        }

                        const targetMethod: (context: any, parameters: any) => Promise<any> = api[apiRequst.apiMethod] || null;

                        if (targetMethod === null) {
                            replyError(context.res, "API Method not found", HttpStatusCode.notFound, targetInfo);
                            return;
                        }

                        try {
                            targetMethod(context, req.body || {}).then((result) => {
                                replySuccess(res, result);
                            }).catch((e) => {
                                replyError(res, e, HttpStatusCode.serverError, targetInfo);
                            });
                        } catch (e) {
                            replyError(res, e, HttpStatusCode.serverError, targetInfo);
                        }
                    }
                };

                if (onAPIRequest == null) {
                    apiRequst.replyError(new Error("API Not handled"));
                    return;
                }
                onAPIRequest(apiRequst);
            });

            if (build.options.enableClientSchema !== false) {
                app.get(["/api/json", "/api/json/:secret"], async (req, res) => {
                    const clientSchemaSecret = req.params.secret || "";
                    const serverSchemaSecrets = build.options.schemaSecrets || [];
                    try {

                        if (serverSchemaSecrets.indexOf(clientSchemaSecret) == -1 && serverSchemaSecrets.length > 0) {
                            replyError(res, new Error("API Schema Requires Authentication"), HttpStatusCode.authError);
                            return;
                        }

                        res.setHeader("schema-version", build.schemaInfo.schema);
                        res.contentType("application/json");
                        res.status(200).send(build.schema);
                    } catch (ex) {
                        replyError(res, ex, HttpStatusCode.serverError);
                    }
                });
            }

            if (build.options.enableDocs !== false) {
                app.get(["/api/docs", "/api/docs/:secret"], async (req, res) => {
                    const clientSchemaSecret = req.params.secret || "";
                    const serverSchemaSecrets = build.options.schemaSecrets || [];
                    try {

                        if (serverSchemaSecrets.indexOf(clientSchemaSecret) == -1 && serverSchemaSecrets.length > 0) {
                            replyError(res, new Error("API Schema Requires Authentication"), HttpStatusCode.authError);
                            return;
                        }

                        res.setHeader("schema-version", build.schemaInfo.schema);
                        const docTemplate = path.join(__dirname, "../../views/docs.ejs");
                        res.contentType("text/html");
                        const result = await ejs.renderFile(docTemplate, { schema: build.schema, versionInfo: build.schemaInfo });
                        res.status(200).send(result);
                    } catch (ex) {
                        replyError(res, ex, HttpStatusCode.serverError);
                    }
                });
            }
        } catch (ex) {
            reject(ex);
            return;
        }
        accept();
    });
}



export { buildAPI, exposeExpressAPI, generateServerSchema }