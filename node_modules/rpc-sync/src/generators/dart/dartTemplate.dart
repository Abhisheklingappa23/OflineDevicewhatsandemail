typedef PropertyItemCreator<T> = T Function(dynamic props);

class IContext {
  String url;
  dynamic headers;

  IContext(
    this.url, {
    dynamic headers,
  }) {
    if (headers == null) {
      this.headers = {};
    } else {
      this.headers = headers;
    }
  }

  Future<dynamic> request(
      String apiClass, String apiMethod, Serial body) async {
    String baseUrl = this.url;
    if (baseUrl.endsWith("/") == false) {
      baseUrl = "$baseUrl/";
    }
    final url =
        Uri.parse("$baseUrl${apiClass.toString()}/${apiMethod.toString()}");

    Map<String, String> headers;
    if (this.headers != null) {
      headers = Map<String, String>.from(this.headers);
    } else {
      headers = {};
    }

    headers["content-type"] = "application/json";
    headers["schema-version"] = schemaVersion;
    headers["timestamp"] = DateTime.now().toIso8601String();

    final response =
        await http.post(url, headers: headers, body: body.serialize());

    final data = response.body.isEmpty ? null : json.decode(response.body);

    if (response.statusCode != 200) {
      if (data["error"] != null) {
        throw Exception(data["error"]);
      }
    }

    return data;
  }
}

bool isTrue(dynamic value) {
  return value == true || value == "true" || value == "1";
}

class Serial {
  String get getEntityName => "Serial";
  dynamic props;
  bool _initEmpty = false;

  Serial({props}) {
    if (props == null) {
      this.props = {};
      _initEmpty = true;
    } else {
      this.props = props;
      _initEmpty = false;
    }
  }

  String deserialize(String jsonString) {
    return json.decode(jsonString);
  }

  String serialize() {
    return json.encode(props);
  }

  dynamic val() {
    if (_initEmpty) {
      return null;
    }
    return this;
  }

  dynamic listToProperty(List<Serial> items) {
    List newItems = [];
    for (var element in items) {
      newItems.add(element.props);
    }
    return newItems;
  }

  List<T> propertyToList<T>(String propName, PropertyItemCreator creator) {
    final obj = props[propName];
    if (obj == null) {
      return [];
    }
    return Serial.objectToList(obj, creator);
  }

  static List<T> objectToList<T>(dynamic obj, PropertyItemCreator creator) {
    final List<T> results = [];
    if (obj != null) {
      final List<dynamic> items = obj;
      for (final item in items) {
        final r = creator(item);
        if (r != null) {
          results.add(r);
        }
      }
    }
    return results;
  }
}
