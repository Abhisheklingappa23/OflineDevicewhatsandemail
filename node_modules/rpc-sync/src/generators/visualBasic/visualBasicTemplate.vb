Public Class IContext
    Public url As String
    Public Headers As New Generic.Dictionary(Of String, String)

    Sub New(url As String)
        Me.url = url
    End Sub
End Class
 
Class Utility
    Public Shared Function ToISODate(dt As DateTime) As String
        Return String.Concat(dt.ToUniversalTime.ToString("s", System.Globalization.CultureInfo.InvariantCulture), "Z")
    End Function

    Shared Function FromIsoDate(theDate As String) As Date
        Return DateTime.Parse(theDate)
    End Function

    Public Shared Function Serialize(obj As Object) As String
        Dim settings As New Newtonsoft.Json.JsonSerializerSettings
        settings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore
        Return Newtonsoft.Json.JsonConvert.SerializeObject(obj, settings)
    End Function

    Public Shared Function DeSerialize(str As String, type As Type)
        Dim settings As New Newtonsoft.Json.JsonSerializerSettings
        settings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore
        Return Newtonsoft.Json.JsonConvert.DeserializeObject(str, type, settings)
    End Function

       Public Shared Function RequestHandler(Of T)(Context As IContext, url As String, params As Object) As T

        Dim ParamsSerialized = Utility.Serialize(params)
        Dim buffer As Byte() = System.Text.UTF8Encoding.UTF8.GetBytes(ParamsSerialized)

        If (Context.url.EndsWith("/")) Then
            url = String.Format("{0}{1}", Context.url, url)
        Else
            url = String.Format("{0}/{1}", Context.url, url)
        End If


        Dim request As Net.HttpWebRequest
        Dim response As Net.HttpWebResponse

        request = System.Net.HttpWebRequest.Create(url)

        request.UserAgent = "rpc"

        request.Headers.Add("schema-version", schemaVersion)

        For Each header In Context.Headers
            request.Headers.Add(header.Key, header.Value)
        Next

        request.Method = "POST"
        request.ContentType = "application/json"
        request.ContentLength = buffer.Length
        Dim ReqStream = request.GetRequestStream()
        ReqStream.Write(buffer, 0, buffer.Length)

        Try
            response = request.GetResponse()
            Dim RspStream = response.GetResponseStream()
            Dim TxtReader As New IO.StreamReader(RspStream)
            Dim ResponseBody = TxtReader.ReadToEnd()
            Return Utility.DeSerialize(ResponseBody, GetType(T))
        Catch ex As System.Net.WebException
            response = ex.Response
            if isNothing(response) Then
                Throw ex
            end if
            Dim RspStream = response.GetResponseStream()
            Dim TxtReader As New IO.StreamReader(RspStream)
            Dim ResponseBody = TxtReader.ReadToEnd()
            Dim Err As Exception
            Try
                Dim Result = Newtonsoft.Json.Linq.JObject.Parse(ResponseBody)
                Err = New Exception(Result("error"))
            Catch exx As Exception
                Throw New Exception(ResponseBody)
            End Try
            If IsNothing(Err) = False Then
                Throw Err
            End If
        End Try
    End Function

End Class