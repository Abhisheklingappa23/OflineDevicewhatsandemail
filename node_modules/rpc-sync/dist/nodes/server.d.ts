import express from "express";
export interface IGenerateSchemaParameters {
    srcPath?: string;
    apiPath?: string;
    entityPath?: string;
    schemaOutputPath?: string;
    documentationView?: string;
    enableDocs?: boolean;
    enableClientSchema?: boolean;
    minClientVersion?: string;
    enableCors?: boolean;
    enableCompression?: boolean;
    enableExpressJson?: boolean;
    debug?: boolean;
    schemaSecrets?: string[];
    cacheSchemaJSON?: boolean;
}
export interface IAPIRequest {
    req: express.Request;
    res: express.Response;
    apiMethod: string;
    apiName: string;
    replyError: (e: any) => void;
    expose: (context: any, apiLibrary: any) => void;
}
interface ISchemaVersion {
    hash: string;
    schema: string;
    modified: string;
}
export interface IServerSchema {
    schema: unknown;
    schemaInfo: ISchemaVersion;
}
declare const generateServerSchema: (options: IGenerateSchemaParameters) => Promise<IServerSchema>;
export interface ISchemaBuild {
    schema: unknown;
    schemaInfo: ISchemaVersion;
    options: IGenerateSchemaParameters;
}
declare const buildAPI: (options: IGenerateSchemaParameters) => Promise<ISchemaBuild>;
declare const exposeExpressAPI: (build: ISchemaBuild, app: express.Application, onAPIRequest: (request: IAPIRequest) => void) => Promise<void>;
export { buildAPI, exposeExpressAPI, generateServerSchema };
