export declare const generators: any;
export interface ISchema {
}
export interface ISchemaUpdate {
    schema: any;
    version: string;
}
export interface IClientSchemaConfig {
    configName: string;
    url: string;
    secret?: string;
    srcUrl?: string;
    docsUrl?: string;
    destSchemaOutput?: string;
    destSchemaOutputPretty?: boolean;
    output: string;
    namespace: string;
    generator: ILanguageGenerator;
    target: string;
}
export interface ILanguageGenerator {
    getHeader(options: IClientSchemaConfig, version: string): Promise<string>;
    generateClassEntity(options: IClientSchemaConfig, entity: any, enums: string[], types: string[], declarations: any[]): string;
    generateInterfaces(options: IClientSchemaConfig, entity: any, enums: string[], types: string[]): string;
    generateEnums(options: IClientSchemaConfig, entity: any): string;
    generateMethods(options: IClientSchemaConfig, apis: any[]): string;
    generateFooter(options: IClientSchemaConfig, enums: string[], types: string[], entities: any[]): string;
}
export declare const generateClientSchemaFromJson: (schemaOptions: IClientSchemaConfig, update: ISchemaUpdate) => Promise<void>;
export declare const generateClientSchema: (config: IClientSchemaConfig) => Promise<ISchemaUpdate>;
