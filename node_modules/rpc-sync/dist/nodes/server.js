"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateServerSchema = exports.exposeExpressAPI = exports.buildAPI = void 0;
const express_1 = __importDefault(require("express"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const ejs_1 = __importDefault(require("ejs"));
const TypescriptParser_1 = require("typescript-parser/TypescriptParser");
const utility_1 = require("../utils/utility");
const hasha_1 = __importDefault(require("hasha"));
const compression_1 = __importDefault(require("compression"));
const cors_1 = __importDefault(require("cors"));
const pkgInfo = require("../../package.json");
var HttpStatusCode;
(function (HttpStatusCode) {
    HttpStatusCode[HttpStatusCode["ok"] = 200] = "ok";
    HttpStatusCode[HttpStatusCode["notFound"] = 404] = "notFound";
    HttpStatusCode[HttpStatusCode["serverError"] = 500] = "serverError";
    HttpStatusCode[HttpStatusCode["authError"] = 403] = "authError";
    HttpStatusCode[HttpStatusCode["badRequest"] = 400] = "badRequest";
})(HttpStatusCode || (HttpStatusCode = {}));
const getSchemaVersion = (options) => {
    const schemaOutputPath = getSchemaInfoPath(options);
    return new Promise((accept, reject) => {
        fs_1.default.readFile(schemaOutputPath, (err, data) => {
            if (err) {
                reject(err);
                return;
            }
            try {
                accept(JSON.parse(data.toString("utf8")));
            }
            catch (e) {
                reject(e);
                return;
            }
        });
    });
};
const getSchemaInfoPath = (options) => {
    return options.schemaOutputPath || path_1.default.join(process.cwd(), "schema.json");
};
const generateSchemaFromFile = (filePath, rootPath) => {
    return new Promise((accept, reject) => {
        const parser = new TypescriptParser_1.TypescriptParser();
        parser.parseFile(filePath, rootPath).then((result) => {
            var enums = [];
            for (const dec of result.declarations) {
                const declaration = dec;
                delete declaration["start"];
                delete declaration["end"];
                delete declaration["accessors"];
                declaration["properties"] = declaration["properties"] || [];
                declaration["methods"] = declaration["methods"] || [];
                declaration["members"] = declaration["members"] || [];
                if (declaration["members"].length > 0) {
                    enums.push(declaration["name"]);
                }
                for (const properties of declaration["properties"]) {
                    delete properties["start"];
                    delete properties["end"];
                }
                var deleteMethods = [];
                for (const method of declaration["methods"]) {
                    if (method["visibility"] == 0) {
                        deleteMethods.push(method);
                    }
                    else {
                        method["parameters"] = method["parameters"] || [];
                        if (method["type"] == null || method["type"] == undefined) {
                            //throw `API method signature missing return type: [${declaration.name}.${method.name}]`;
                            deleteMethods.push(method);
                        }
                        else if (method["parameters"].length != 2) {
                            //throw `API method signature must have 2 parameters or set as private: [${declaration.name}.${method.name}]`;
                            deleteMethods.push(method);
                        }
                        else {
                            delete method["start"];
                            delete method["end"];
                            for (const param of method["parameters"]) {
                                delete param["start"];
                                delete param["end"];
                            }
                            delete method["variables"];
                        }
                    }
                }
                deleteMethods.forEach((m) => {
                    const i = declaration["methods"].indexOf(m);
                    if (i != -1) {
                        declaration["methods"].splice(i, 1);
                    }
                });
            }
            delete result["filePath"];
            delete result["rootPath"];
            delete result["imports"];
            delete result["start"];
            delete result["end"];
            delete result["usages"];
            delete result["resources"];
            delete result["exports"];
            result["enums"] = enums;
            accept(result);
        }).catch((e) => {
            reject(e);
        });
    });
};
const generateServerSchema = (options) => {
    return new Promise((accept, reject) => {
        const schemaInfoPath = getSchemaInfoPath(options);
        const srcPath = options.srcPath || path_1.default.join(process.cwd(), "/src");
        const apiPath = options.apiPath || path_1.default.join(srcPath, "/api");
        const entityPath = options.entityPath || path_1.default.join(srcPath, "/db/entity/");
        let schema = {};
        (0, utility_1.getFilesAtPath)(apiPath).then((apiFiles) => __awaiter(void 0, void 0, void 0, function* () {
            for (const apiFilePath of apiFiles) {
                let apiName = path_1.default.basename(apiFilePath, ".ts");
                if (apiName.endsWith("API")) {
                    apiName = apiName.substring(0, apiName.length - 3);
                    try {
                        const result = yield generateSchemaFromFile(apiFilePath, srcPath);
                        schema[apiName] = result;
                    }
                    catch (e) {
                        reject(e);
                        return;
                    }
                }
            }
            (0, utility_1.getFilesAtPath)(entityPath).then((apiFiles) => __awaiter(void 0, void 0, void 0, function* () {
                for (const apiFilePath of apiFiles) {
                    if (path_1.default.dirname(apiFilePath).endsWith("migration") == false) {
                        const entityName = `${path_1.default.basename(apiFilePath, ".ts")}_Entity`;
                        try {
                            const result = yield generateSchemaFromFile(apiFilePath, srcPath);
                            result["entity"] = true;
                            schema[entityName] = result;
                        }
                        catch (e) {
                            reject(e);
                            return;
                        }
                    }
                }
                const schemaStr = JSON.stringify(schema);
                const hash = (0, hasha_1.default)(schemaStr, { algorithm: 'sha512' }).toString().toUpperCase();
                let schemaInfo;
                try {
                    schemaInfo = yield getSchemaVersion(options);
                }
                catch (ex) {
                    schemaInfo = null;
                }
                if (schemaInfo == null) {
                    schemaInfo = {
                        hash: null,
                        schema: "0.0",
                        modified: new Date().toISOString(),
                    };
                }
                if (isNaN(parseFloat(schemaInfo.schema))) {
                    schemaInfo.schema = "0.0";
                }
                if (options.cacheSchemaJSON == true) {
                    accept({
                        schema,
                        schemaInfo
                    });
                    return;
                }
                if (schemaInfo.hash !== hash) {
                    schemaInfo.schema = `${schemaInfo.schema.split(".")[0]}.${(parseInt(schemaInfo.schema.split(".")[1]) + 1)}`;
                    schemaInfo.hash = hash;
                    const schemaOutputInfo = {};
                    schemaOutputInfo[pkgInfo["name"]] = pkgInfo["version"];
                    schemaOutputInfo.schema = schemaInfo.schema;
                    schemaOutputInfo.hash = schemaInfo.hash;
                    schemaOutputInfo.modified = new Date().toISOString();
                    fs_1.default.writeFile(schemaInfoPath, JSON.stringify(schemaOutputInfo, null, 2), (err) => __awaiter(void 0, void 0, void 0, function* () {
                        if (err) {
                            reject(err);
                        }
                        accept({
                            schema,
                            schemaInfo: schemaOutputInfo
                        });
                    }));
                }
                else {
                    accept({
                        schema,
                        schemaInfo
                    });
                }
            })).catch(reject);
        })).catch(reject);
    });
};
exports.generateServerSchema = generateServerSchema;
const buildAPI = (options) => {
    return new Promise((accept, reject) => {
        generateServerSchema(options).then((serverSchema) => {
            accept({
                schema: serverSchema.schema,
                schemaInfo: serverSchema.schemaInfo,
                options
            });
        }).catch((e) => {
            reject(e);
        });
    });
};
exports.buildAPI = buildAPI;
const exposeExpressAPI = (build, app, onAPIRequest) => {
    const replySuccess = (res, result) => {
        res.contentType("application/json");
        if (typeof (result) !== "object") {
            result = { primitive: result };
        }
        res.status(HttpStatusCode.ok).send(result);
    };
    const replyError = (res, error, statusCode, extra) => {
        if (build.options.debug == true) {
            console.error(error);
        }
        if (error != null) {
            if (error.statusCode != null) {
                statusCode = error.statusCode;
            }
        }
        error = error || "Unknown error";
        extra = extra || {};
        if ((error.stack || null) !== null) {
            extra.stack = error.stack;
        }
        if ((error.message || null) !== null) {
            error = error.message;
        }
        if (build.options.debug !== true) {
            delete extra.stack;
        }
        res.contentType("application/json");
        res.status(statusCode).send(JSON.stringify(Object.assign(extra, { "error": error.toString() })));
    };
    return new Promise((accept, reject) => {
        try {
            app.use(function (req, res, next) {
                res.removeHeader('X-Powered-By');
                next();
            });
            if (build.options.enableCors !== false) {
                app.use((0, cors_1.default)({ methods: ["GET", "POST"], exposedHeaders: ["*"], allowedHeaders: ["*"] }));
            }
            if (build.options.enableCompression !== false) {
                app.use((0, compression_1.default)({}));
            }
            if (build.options.enableExpressJson !== false) {
                app.use(express_1.default.json());
            }
            app.post("/api/:apiName/:apiMethod", (req, res) => {
                let clientSchemaVersion = parseFloat((req.headers["schema-version"] || "").toString());
                let serverSchemaVersion = parseFloat((build.schemaInfo.schema || "").toString());
                let minSchemaVersion = parseFloat((build.options.minClientVersion || "").toString());
                if (isNaN(clientSchemaVersion)) {
                    clientSchemaVersion = 0;
                }
                if (isNaN(serverSchemaVersion)) {
                    serverSchemaVersion = 0;
                }
                if (isNaN(minSchemaVersion)) {
                    minSchemaVersion = 0;
                }
                if (minSchemaVersion !== 0) {
                    if (clientSchemaVersion < minSchemaVersion) {
                        replyError(res, new Error(`The client v${clientSchemaVersion} is out of date - Minimum: v${minSchemaVersion}, Latest: v${serverSchemaVersion}`), HttpStatusCode.badRequest);
                        return;
                    }
                }
                res.setHeader("schema-version", build.schemaInfo.schema);
                const apiRequst = {
                    req,
                    res,
                    apiName: (req.params.apiName || ""),
                    apiMethod: (req.params.apiMethod || ""),
                    replyError: (e) => replyError(res, e, HttpStatusCode.serverError),
                    expose: (context, apiLibrary) => {
                        context.timestamp = req.headers["timestamp"];
                        const targetInfo = {
                            "target": `${apiRequst.apiName}.${apiRequst.apiMethod}`
                        };
                        if (apiLibrary === null) {
                            replyError(context.res, "apiLibrary not provided", HttpStatusCode.notFound, targetInfo);
                            return;
                        }
                        const api = apiLibrary[apiRequst.apiName] || null;
                        if (api === null) {
                            replyError(context.res, "API not found", HttpStatusCode.notFound, targetInfo);
                            return;
                        }
                        const targetMethod = api[apiRequst.apiMethod] || null;
                        if (targetMethod === null) {
                            replyError(context.res, "API Method not found", HttpStatusCode.notFound, targetInfo);
                            return;
                        }
                        try {
                            targetMethod(context, req.body || {}).then((result) => {
                                replySuccess(res, result);
                            }).catch((e) => {
                                replyError(res, e, HttpStatusCode.serverError, targetInfo);
                            });
                        }
                        catch (e) {
                            replyError(res, e, HttpStatusCode.serverError, targetInfo);
                        }
                    }
                };
                if (onAPIRequest == null) {
                    apiRequst.replyError(new Error("API Not handled"));
                    return;
                }
                onAPIRequest(apiRequst);
            });
            if (build.options.enableClientSchema !== false) {
                app.get(["/api/json", "/api/json/:secret"], (req, res) => __awaiter(void 0, void 0, void 0, function* () {
                    const clientSchemaSecret = req.params.secret || "";
                    const serverSchemaSecrets = build.options.schemaSecrets || [];
                    try {
                        if (serverSchemaSecrets.indexOf(clientSchemaSecret) == -1 && serverSchemaSecrets.length > 0) {
                            replyError(res, new Error("API Schema Requires Authentication"), HttpStatusCode.authError);
                            return;
                        }
                        res.setHeader("schema-version", build.schemaInfo.schema);
                        res.contentType("application/json");
                        res.status(200).send(build.schema);
                    }
                    catch (ex) {
                        replyError(res, ex, HttpStatusCode.serverError);
                    }
                }));
            }
            if (build.options.enableDocs !== false) {
                app.get(["/api/docs", "/api/docs/:secret"], (req, res) => __awaiter(void 0, void 0, void 0, function* () {
                    const clientSchemaSecret = req.params.secret || "";
                    const serverSchemaSecrets = build.options.schemaSecrets || [];
                    try {
                        if (serverSchemaSecrets.indexOf(clientSchemaSecret) == -1 && serverSchemaSecrets.length > 0) {
                            replyError(res, new Error("API Schema Requires Authentication"), HttpStatusCode.authError);
                            return;
                        }
                        res.setHeader("schema-version", build.schemaInfo.schema);
                        const docTemplate = path_1.default.join(__dirname, "../../views/docs.ejs");
                        res.contentType("text/html");
                        const result = yield ejs_1.default.renderFile(docTemplate, { schema: build.schema, versionInfo: build.schemaInfo });
                        res.status(200).send(result);
                    }
                    catch (ex) {
                        replyError(res, ex, HttpStatusCode.serverError);
                    }
                }));
            }
        }
        catch (ex) {
            reject(ex);
            return;
        }
        accept();
    });
};
exports.exposeExpressAPI = exposeExpressAPI;
//# sourceMappingURL=server.js.map