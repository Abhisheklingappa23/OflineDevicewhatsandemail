"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilesAtPath = exports.isDirectory = exports.isDefinedAndNotNull = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const isDefinedAndNotNull = (obj) => {
    return obj !== null && obj !== undefined;
};
exports.isDefinedAndNotNull = isDefinedAndNotNull;
const isDirectory = (filePath) => {
    return new Promise((accept, reject) => {
        fs_1.default.lstat(filePath, (err, result) => {
            if (err) {
                reject(err);
                return;
            }
            accept(result.isDirectory());
        });
    });
};
exports.isDirectory = isDirectory;
const getFilesAtPath = (filePath) => {
    return new Promise((accept, reject) => {
        fs_1.default.readdir(filePath, (err, files) => __awaiter(void 0, void 0, void 0, function* () {
            if (err) {
                reject(err);
                return;
            }
            let results = [];
            for (const file of files) {
                const fpath = path_1.default.join(filePath, file);
                try {
                    if ((yield (0, exports.isDirectory)(fpath)) === false) {
                        results.push(fpath);
                    }
                    else {
                        results = [...results, ...yield (0, exports.getFilesAtPath)(fpath)];
                    }
                }
                catch (e) {
                    reject(e);
                    return;
                }
            }
            accept(results);
        }));
    });
};
exports.getFilesAtPath = getFilesAtPath;
//# sourceMappingURL=utility.js.map